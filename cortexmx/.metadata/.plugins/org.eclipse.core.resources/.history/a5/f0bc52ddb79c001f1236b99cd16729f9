/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>

//#if !defined(__SOFT_FP__) && defined(__ARM_FP)
//  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
//#endif

int32_t add_number(int32_t a, int32_t b) {
	int32_t ret;
	__asm volatile ("svc #36");
	__asm volatile ("mov %0, r0": "=r"(ret));
	return ret;
}

int32_t sub_number(int32_t a, int32_t b) {
	int32_t ret;
	__asm volatile ("svc #37");
	__asm volatile ("mov %0, r0": "=r"(ret));
	return ret;
}

int32_t mul_number(int32_t a, int32_t b) {
	int32_t ret;
	__asm volatile ("svc #38");
	__asm volatile ("mov %0, r0": "=r"(ret));
	return ret;
}

int32_t div_number(int32_t a, int32_t b) {
	int32_t ret;
	__asm volatile ("svc #39");
	__asm volatile ("mov %0, r0": "=r"(ret));
	return ret;
}

int main(void)
{

	int32_t res;

	res = add_number(10, -8);
	printf("SVC addition		: %ld\n", res);
	res = sub_number(10, -8);
	printf("SVC addition		: %ld\n", res);
	res = add_number(10, -8);
	printf("SVC addition		: %ld\n", res);
	res = add_number(10, -8);
	printf("SVC addition		: %ld\n", res);


    /* Loop forever */
	for(;;);
}

__attribute__((naked)) void SVC_Handler(void) {
	__asm volatile ("mrs r0, msp");
	__asm volatile ("b SVC_Handler_C");
}

void SVC_Handler_C(uint32_t *pBaseAddrOfStackFrame) {
	printf("[SVC_Handler]\n");
	printf("MSP : %p\n", pBaseAddrOfStackFrame);
	printf("PC  : %#lx\n", pBaseAddrOfStackFrame[6]);
	uint8_t *preturn_addr = (uint8_t*)pBaseAddrOfStackFrame[6];

	//decrement the return address by 2 to point to opcode of
	//the svc instruction in program memory
	preturn_addr -= 2;

	//extract the last byte from that opcode
	uint8_t svc_number = *preturn_addr;

	printf("SVC number : %d\n",svc_number);

	svc_number += 4;

	//will change the r0 register of thread mode code
	//change only if np important value in r0
	pBaseAddrOfStackFrame[0] = svc_number; //storing svc number to R0 of
											//thread mode code stack frame

//	__asm volatile ("mov r0, %0": : "r"(svc_number));

}


